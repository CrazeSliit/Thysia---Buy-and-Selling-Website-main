// MongoDB schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  password  String?
  role      UserRole @default(BUYER)
  isActive  Boolean  @default(true)
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile relations
  buyerProfile  BuyerProfile?
  sellerProfile SellerProfile?
  driverProfile DriverProfile?

  // Relations
  orders           Order[]
  orderItems       OrderItem[]
  notifications    Notification[]
  adminLogs        AdminLog[]
  messagesSent     Message[]      @relation("MessagesSent")
  messagesReceived Message[]      @relation("MessagesReceived")

  @@map("users")
}

enum UserRole {
  BUYER
  SELLER
  DRIVER
  ADMIN
}

// Buyer profile
model BuyerProfile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[]
  cartItems CartItem[]
  orders    Order[]
  reviews   Review[]

  @@map("buyer_profiles")
}

// Seller profile
model SellerProfile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName    String?
  businessPhone   String?
  businessAddress String?
  isVerified      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  products Product[]

  @@map("seller_profiles")
}

// Driver profile
model DriverProfile {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @unique @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone         String?
  vehicleType   String?
  licenseNumber String?
  isVerified    Boolean  @default(false)
  isAvailable   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("driver_profiles")
}

// Address model
model Address {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  buyerId   String       @db.ObjectId
  buyer     BuyerProfile @relation(fields: [buyerId], references: [id], onDelete: Cascade)

  type      String       @default("HOME") // HOME, WORK, OTHER
  fullName  String
  company   String?      // Optional company field
  phone     String
  street    String
  city      String
  state     String
  zipCode   String
  country   String  @default("US")
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("addresses")
}

// Category model
model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

// Product model
model Product {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  stock       Int           @default(0)
  imageUrl    String?
  isActive    Boolean       @default(true)
  categoryId  String        @db.ObjectId
  sellerId    String        @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  category   Category      @relation(fields: [categoryId], references: [id])
  seller     SellerProfile @relation(fields: [sellerId], references: [id])

  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

// Cart item model
model CartItem {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  buyerId   String       @db.ObjectId
  productId String       @db.ObjectId
  quantity  Int          @default(1)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  buyer   BuyerProfile @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  product Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([buyerId, productId])
  @@map("cart_items")
}

// Order model
model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  buyerId     String      @db.ObjectId
  addressId   String      @db.ObjectId
  status      OrderStatus @default(PENDING)
  totalAmount Float
  shippingFee Float       @default(0)
  taxes       Float       @default(0)
  finalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  buyer           BuyerProfile @relation(fields: [buyerId], references: [id])
  shippingAddress Address      @relation(fields: [addressId], references: [id])

  orderItems    OrderItem[]
  notifications Notification[]
  User          User?          @relation(fields: [userId], references: [id])
  userId        String?        @db.ObjectId

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

// Order item model
model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  sellerId  String   @db.ObjectId
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  seller  User    @relation(fields: [sellerId], references: [id])

  @@map("order_items")
}

// Review model
model Review {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  buyerId   String       @db.ObjectId
  productId String       @db.ObjectId
  rating    Int // 1-5 stars
  comment   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  buyer   BuyerProfile @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  product Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([buyerId, productId])
  @@map("reviews")
}

// Notification model
model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  orderId   String?          @db.ObjectId
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@map("notifications")
}

enum NotificationType {
  ORDER_PLACED
  ORDER_CONFIRMED
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_CANCELLED
  SYSTEM
  PROMOTION
}

// Message model
model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User @relation("MessagesSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessagesReceived", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Admin log model
model AdminLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  adminId   String   @db.ObjectId
  action    String
  details   String?
  createdAt DateTime @default(now())

  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_logs")
}
