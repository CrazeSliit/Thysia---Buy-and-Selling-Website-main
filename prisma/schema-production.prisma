// Production-ready Prisma schema for PostgreSQL
// This schema should replace schema.prisma when deploying to production

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      UserRole @default(BUYER)
  isActive  Boolean  @default(true)
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile relations
  buyerProfile  BuyerProfile?
  sellerProfile SellerProfile?
  driverProfile DriverProfile?
  
  // Relations
  orders           Order[]
  orderItems       OrderItem[]  // Seller relation for order items
  reviews          Review[]
  notifications    Notification[]
  adminLogs        AdminLog[]
  messagesSent     Message[] @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")

  @@map("users")
}

// Enums for better type safety
enum UserRole {
  BUYER
  SELLER
  DRIVER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Buyer profile
model BuyerProfile {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  addresses    Address[]
  cartItems    CartItem[]

  @@map("buyer_profiles")
}

// Seller profile
model SellerProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName String?
  phone       String?
  address     String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("seller_profiles")
}

// Driver profile
model DriverProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone        String?
  vehicleType  String?
  licenseNumber String?
  isVerified   Boolean  @default(false)
  isAvailable  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  deliveries Delivery[]

  @@map("driver_profiles")
}

// Address model
model Address {
  id              String       @id @default(cuid())
  buyerProfileId  String
  buyerProfile    BuyerProfile @relation(fields: [buyerProfileId], references: [id], onDelete: Cascade)
  fullName        String
  phoneNumber     String
  addressLine1    String
  addressLine2    String?
  city            String
  state           String
  postalCode      String
  country         String       @default("Philippines")
  isDefault       Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  orders Order[]

  @@map("addresses")
}

// Category model
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

// Product model
model Product {
  id              String        @id @default(cuid())
  name            String
  description     String?
  price           Decimal       @db.Decimal(10, 2)
  stock           Int           @default(0)
  images          String[]      // Array of image URLs
  categoryId      String
  category        Category      @relation(fields: [categoryId], references: [id])
  sellerProfileId String
  sellerProfile   SellerProfile @relation(fields: [sellerProfileId], references: [id], onDelete: Cascade)
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    Review[]

  @@map("products")
}

// Cart item model
model CartItem {
  id             String       @id @default(cuid())
  buyerProfileId String
  buyerProfile   BuyerProfile @relation(fields: [buyerProfileId], references: [id], onDelete: Cascade)
  productId      String
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity       Int          @default(1)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([buyerProfileId, productId])
  @@map("cart_items")
}

// Order model
model Order {
  id          String        @id @default(cuid())
  orderNumber String        @unique @default(cuid())
  userId      String        // Buyer
  user        User          @relation(fields: [userId], references: [id])
  addressId   String
  address     Address       @relation(fields: [addressId], references: [id])
  totalAmount Decimal       @db.Decimal(10, 2)
  status      OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  orderItems  OrderItem[]
  deliveries  Delivery[]
  reviews     Review[]

  @@map("orders")
}

// Order item model
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  sellerId  String  // Seller who owns the product
  seller    User    @relation(fields: [sellerId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(10, 2) // Price at time of order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

// Delivery model
model Delivery {
  id              String         @id @default(cuid())
  orderId         String
  order           Order          @relation(fields: [orderId], references: [id])
  driverProfileId String?
  driverProfile   DriverProfile? @relation(fields: [driverProfileId], references: [id])
  status          DeliveryStatus @default(PENDING)
  pickupAddress   String
  deliveryAddress String
  estimatedTime   DateTime?
  actualTime      DateTime?
  fee             Decimal        @db.Decimal(10, 2)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("deliveries")
}

// Review model
model Review {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String   // Reviewer
  user      User     @relation(fields: [userId], references: [id])
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, productId, userId])
  @@map("reviews")
}

// Notification model
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      String   // ORDER, DELIVERY, SYSTEM, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

// Message model for chat
model Message {
  id           String   @id @default(cuid())
  senderId     String
  sender       User     @relation("MessagesSent", fields: [senderId], references: [id])
  receiverId   String
  receiver     User     @relation("MessagesReceived", fields: [receiverId], references: [id])
  content      String
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("messages")
}

// Admin log model
model AdminLog {
  id        String   @id @default(cuid())
  adminId   String
  admin     User     @relation(fields: [adminId], references: [id])
  action    String
  details   String?
  createdAt DateTime @default(now())

  @@map("admin_logs")
}
